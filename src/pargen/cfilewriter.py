# BSD 3-Clause License
#
# Copyright (c) 2022, Haju Schulz (haju.schulz@online.de)
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from typing import Dict

import datamodel as DM
import datetime
import uuid

class CFileWriter(DM.Walker):

    def __init__(self, model : DM.Model, options : Dict[str, str]) :
        super().__init__(model, options)
        self.cfile = open(self.options.get("FN")+".c", "w");
        self.hfile = open(self.options.get("FN")+".h", "w");
        self.container = None
        self.block = None


    def pre_run(self):

        include_guard = f"PARGEN_HEADER_INCLUDED_{uuid.uuid4().hex}"

        self.hfile.write(
            f"/* AUTOGENERATED by {self.options.get('PNAME')} {self.options.get('VERSION')} {datetime.datetime.now()}\n"
            f" * using model {self.options.get('INPUT')}\n"
            f" * !! DO NOT EDIT MANUALLY !!"
            " */\n\n"
            f"#ifndef {include_guard}\n#define {include_guard}\n\n"
            "#ifdef __cplusplus\n"
            "extern \"C\" {\n"
            "#endif\n\n"
            "#include <stdint.h>\n"
            "typedef struct sruct_pargen_header_type\n"
            "{\n"
            "    uint16_t id;\n"
            "    uint16_t major;\n"
            "    uint16_t minor;\n"
            "    uint16_t dataver;\n"
            "    uint32_t reserved;\n"
            "    uint32_t length;\n"
            "} pargen_header_type_t;\n\n"
            )

    def post_run(self):
        self.hfile.write(
            "#ifdef __cplusplus\n"
            "}\n"
            "#endif\n#endif\n")

        self.cfile.close()
        self.hfile.close()

    _TYPE_MAPPING = {
        DM.ParamType.uint32  : "uint32_t",
        DM.ParamType.uint8   : "uint8_t",
        DM.ParamType.uint16  : "uint16_t",
        DM.ParamType.uint64  : "uint64_t",
        DM.ParamType.int8    : "int8_t",
        DM.ParamType.int16   : "int16_t",
        DM.ParamType.int32   : "int32_t",
        DM.ParamType.int64   : "int64_t",
        DM.ParamType.float32 : "float",
        DM.ParamType.float64 : "double",
        DM.ParamType.utf8    : "char"
    }

    _SIZE_MAPPING = {
        DM.ParamType.uint32  : 4,
        DM.ParamType.uint8   : 1,
        DM.ParamType.uint16  : 2,
        DM.ParamType.uint64  : 8,
        DM.ParamType.int8    : 1,
        DM.ParamType.int16   : 2,
        DM.ParamType.int32   : 4,
        DM.ParamType.int64   : 8,
        DM.ParamType.float32 : 4,
        DM.ParamType.float64 : 8,
        DM.ParamType.utf8    : 1,
    }


    def begin_container(self, container : DM.Container) -> None:
            self.container = container

    def begin_block(self, block : DM.Block) -> None:
        self.block = block

        self.hfile.write(
            f"/* BEGIN Block {self.block.name} in container "
            f"{self.container.name} @ {hex(self.block.addr)}\n")

        if block.comment is not None:
            self.hfile.write(" *\n")

            for line in block.comment.splitlines():
                self.hfile.write(" * " + line + "\n")
            self.hfile.write(" */\n")

        self.hfile.write(f"extern volatile const pargen_header_type_t {self.block.name}_blkhdr;\n\n")

    def end_block(self, block : DM.Block) -> None:
        self.hfile.write(f"/* END Block {self.block.name}\n */\n\n")

    def begin_parameter(self, param : DM.Parameter) -> None:
        """Patch parameter bytes into intelhex object"""

        name =  f"{self.block.name}_{param.name}"

        self.hfile.write(f"/* Parameter {name} @ {hex(param.offset)}\n")

        # write optional comment
        if param.comment is not None:
            for line in param.comment.splitlines():
                self.hfile.write(" * " + line + "\n")
        self.hfile.write(" */\n")

        self.hfile.write(
            f"extern volatile const "
            f"{CFileWriter._TYPE_MAPPING.get(param.type)} "
            f"{name}")

        element_size = CFileWriter._SIZE_MAPPING.get(param.type)
        if (DM.ParamType.utf8 == param.type) or (element_size < len(param.value)):
            self.hfile.write(f"[{int(len(param.value)/ element_size)}]")

        self.hfile.write(";\n\n")







